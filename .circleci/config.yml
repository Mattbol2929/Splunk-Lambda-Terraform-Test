version: 2.1

orbs:
  terraform: circleci/terraform@3.6.0
jobs:
  tflint_region:
    docker:
      - image: hashicorp/terraform:1.7
        entrypoint: /bin/sh
    resource_class: small
    parameters:
      region:
        description: "AWS region to deploy to"
        type: string
    steps:
      - setup_remote_docker
      - checkout
      - run:
          command: |
              apk --upgrade --no-cache add curl unzip
              curl -L -o tflint.zip https://github.com/terraform-linters/tflint/releases/download/v0.45.0/tflint_linux_amd64.zip
              unzip tflint.zip
              rm -f tflint.zip
      - run: cd <<parameters.region>> && ../tflint --minimum-failure-severity=error

  tflint_global:
    docker:
      - image: hashicorp/terraform:1.7
        entrypoint: /bin/sh
    resource_class: small
    steps:
      - setup_remote_docker
      - checkout
      - run:
          command: |
              apk --upgrade --no-cache add curl unzip
              curl -L -o tflint.zip https://github.com/terraform-linters/tflint/releases/download/v0.45.0/tflint_linux_amd64.zip
              unzip tflint.zip
              rm -f tflint.zip
      - run: cd global && ../tflint --minimum-failure-severity=error

  terraform_plan_region:
    docker:
      - image: hashicorp/terraform:1.7
    resource_class: small
    parameters:
      region:
        description: "AWS region to deploy to"
        type: string
    steps:
      - checkout
      - run: 
          name: Set Terraform environment variables from Splunk context
          command: |
            export TF_VAR_hec_host="$SPLUNK_COLLECTOR_URL"
            export TF_VAR_hec_token="$SPLUNK_HEC_TOKEN"
            
            # Create terraform.tfvars file
            cat > <<parameters.region>>/terraform.tfvars \<< EOF
            # Path to the Lambda function zip file
            lambda_zip_path = "../src/SplunkLambdaCloudWatchLogsProcessor.zip"

            # Splunk HEC host URL
            hec_host = "$SPLUNK_COLLECTOR_URL"

            # Splunk HEC token
            hec_token = "$SPLUNK_HEC_TOKEN"

            # ELB cookie name (if applicable)
            elb_cookie_name = ""
            EOF
      - run: terraform -chdir=<<parameters.region>> init 
      - run: 
          name: Plan Terraform changes and check if there are changes
          command: |
            terraform -chdir=<<parameters.region>> plan -var-file=terraform.tfvars -out=tf-<<parameters.region>>.plan
            
            # Check if there are any changes in the plan
            CHANGES=$(terraform -chdir=<<parameters.region>> show -no-color tf-<<parameters.region>>.plan | grep -E '^\s*[~+-]' | wc -l)
            
            # Create a file to indicate if there are changes
            if [ $CHANGES -gt 0 ]; then
              echo "Changes detected in <<parameters.region>> region"
              mkdir -p /tmp/workspace
              echo "true" > /tmp/workspace/has_changes_<<parameters.region>>
            else
              echo "No changes detected in <<parameters.region>> region"
              mkdir -p /tmp/workspace
              echo "false" > /tmp/workspace/has_changes_<<parameters.region>>
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - has_changes_<<parameters.region>>

  terraform_plan_global:
    docker:
      - image: hashicorp/terraform:1.7
    resource_class: small
    steps:
      - checkout
      - run: terraform -chdir=global init 
      - run: 
          name: Plan Terraform changes and check if there are changes
          command: |
            terraform -chdir=global plan -out=tf-global.plan
            
            # Check if there are any changes in the plan
            CHANGES=$(terraform -chdir=global show -no-color tf-global.plan | grep -E '^\s*[~+-]' | wc -l)
            
            # Create a file to indicate if there are changes
            if [ $CHANGES -gt 0 ]; then
              echo "Changes detected in global configuration"
              mkdir -p /tmp/workspace
              echo "true" > /tmp/workspace/has_changes_global
            else
              echo "No changes detected in global configuration"
              mkdir -p /tmp/workspace
              echo "false" > /tmp/workspace/has_changes_global
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - has_changes_global

  terraform_apply_region:
    docker:
      - image: hashicorp/terraform:1.7
    resource_class: small
    parameters:
      region:
        description: "AWS region to deploy to"
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Check if there are changes to apply
          command: |
            if [ -f /tmp/workspace/has_changes_<<parameters.region>> ]; then
              HAS_CHANGES=$(cat /tmp/workspace/has_changes_<<parameters.region>>)
              if [ "$HAS_CHANGES" = "false" ]; then
                echo "No changes detected in <<parameters.region>> region. Skipping apply."
                circleci-agent step halt
                exit 0
              else
                echo "Changes detected in <<parameters.region>> region. Proceeding with apply."
              fi
            else
              echo "Change detection file not found. Proceeding with apply as a precaution."
            fi
      - run: 
          name: Set Terraform environment variables from Splunk context
          command: |
            export TF_VAR_hec_host="$SPLUNK_COLLECTOR_URL"
            export TF_VAR_hec_token="$SPLUNK_HEC_TOKEN"
            
            cat > <<parameters.region>>/terraform.tfvars \<< EOF
            # Path to the Lambda function zip file
            lambda_zip_path = "../src/SplunkLambdaCloudWatchLogsProcessor.zip"

            # Splunk HEC host URL
            hec_host = "$SPLUNK_COLLECTOR_URL"

            # Splunk HEC token
            hec_token = "$SPLUNK_HEC_TOKEN"

            # ELB cookie name (if applicable)
            elb_cookie_name = ""
            EOF
      - run: terraform -chdir=<<parameters.region>> init 
      - run: terraform -chdir=<<parameters.region>> plan -var-file=terraform.tfvars -out=tf-<<parameters.region>>.plan
      - run: terraform -chdir=<<parameters.region>> apply tf-<<parameters.region>>.plan

  terraform_apply_global:
    docker:
      - image: hashicorp/terraform:1.7
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Check if there are changes to apply
          command: |
            if [ -f /tmp/workspace/has_changes_global ]; then
              HAS_CHANGES=$(cat /tmp/workspace/has_changes_global)
              if [ "$HAS_CHANGES" = "false" ]; then
                echo "No changes detected in global configuration. Skipping apply."
                circleci-agent step halt
                exit 0
              else
                echo "Changes detected in global configuration. Proceeding with apply."
              fi
            else
              echo "Change detection file not found. Proceeding with apply as a precaution."
            fi
      - run: terraform -chdir=global init
      - run: terraform -chdir=global plan -out=tf-global.plan
      - run: terraform -chdir=global apply tf-global.plan

workflows:
  terraform_plan_and_apply:
    jobs:
      - tflint_region:
          name: tflint-<<matrix.region>>
          matrix:
            parameters:
              region: ["us-east-1", "eu-central-1"]
      - terraform_plan_region:
          name: terraform-plan-<<matrix.region>>
          requires:
            - tflint-<<matrix.region>>
          matrix:
            parameters:
              region: ["us-east-1", "eu-central-1"]    
          context: 
            - aws
            - splunk
      - tflint_global:
          name: tflint-global
      - terraform_plan_global:
          name: terraform-plan-global
          requires:
            - tflint-global
          context: aws      
      - approval:
          name: global-apply-approval
          type: approval
          requires: 
            - terraform-plan-global
          filters:
            branches:
              only:
                - main
      - terraform_apply_global:
          name: terraform-apply-global
          requires:
            - global-apply-approval
          context: aws
          filters:
            branches:
              only:
                - main     
      - approval:
          name: region-apply-approval-<<matrix.region>>
          type: approval
          requires: 
            - terraform-plan-<<matrix.region>>
          filters:
            branches:
              only:
                - main
          matrix:
            parameters:
              region: ["us-east-1", "eu-central-1"]    
      - terraform_apply_region:
          name: terraform-apply-<<matrix.region>>
          requires:
            - region-apply-approval-<<matrix.region>>
          matrix:
            parameters:
              region: ["us-east-1", "eu-central-1"]    
          context: 
            - aws
            - splunk
          filters:
            branches:
                only:
                - main
