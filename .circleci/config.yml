# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  terraform: circleci/terraform@3.6.0
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  tflint_region:
    docker:
      - image: hashicorp/terraform:1.7
        entrypoint: /bin/sh
    resource_class: small
    parameters:
      region:
        description: "AWS region to deploy to"
        type: string
    steps:
      - setup_remote_docker
      - checkout
      #- run: pwd && ls -la && ls -la ../ && ls -la ../.. && ls -la ../../..
      #- run:  docker run --rm -v $(pwd):/data -t --entrypoint /bin/sh ghcr.io/terraform-linters/tflint -c "tflint --init && pwd && ls -la && cd /home/circleci/project/<<parameters.region>>/ && tflint"
      #- run: cd <<parameters.region>> && ../.tflint
      - run:
          command: |
              apk --upgrade --no-cache add curl unzip
              curl -L -o tflint.zip https://github.com/terraform-linters/tflint/releases/download/v0.45.0/tflint_linux_amd64.zip
              unzip tflint.zip
              rm -f tflint.zip
      - run: cd <<parameters.region>> && ../tflint --minimum-failure-severity=error

  tflint_global:
    docker:
      - image: hashicorp/terraform:1.7
        entrypoint: /bin/sh
    resource_class: small
    steps:
      - setup_remote_docker
      - checkout
      #- run: pwd && ls -la && ls -la ../ && ls -la ../.. && ls -la ../../..
      #- run:  docker run --rm -v $(pwd):/data -t --entrypoint /bin/sh ghcr.io/terraform-linters/tflint -c "tflint --init && pwd && ls -la && cd /home/circleci/project/<<parameters.region>>/ && tflint"
      #- run: cd <<parameters.region>> && ../.tflint
      - run:
          command: |
              apk --upgrade --no-cache add curl unzip
              curl -L -o tflint.zip https://github.com/terraform-linters/tflint/releases/download/v0.45.0/tflint_linux_amd64.zip
              unzip tflint.zip
              rm -f tflint.zip
      - run: cd global && ../tflint --minimum-failure-severity=error

  terraform_plan_region:
    docker:
      - image: hashicorp/terraform:1.7
    resource_class: small
    parameters:
      region:
        description: "AWS region to deploy to"
        type: string
    steps:
      - checkout
      - run: terraform -chdir=<<parameters.region>> init 
      - run: terraform -chdir=<<parameters.region>> plan -var-file=terraform.tfvars -out=tf-<<parameters.region>>.plan

  terraform_plan_global:
    docker:
      - image: hashicorp/terraform:1.7
    resource_class: small
    steps:
      - checkout
      - run: terraform -chdir=global init 
      - run: terraform -chdir=global plan -out=tf-global.plan

  terraform_apply_region:
    docker:
      - image: hashicorp/terraform:1.7
    resource_class: small
    parameters:
      region:
        description: "AWS region to deploy to"
        type: string
    steps:
      - checkout
      - run: terraform -chdir=<<parameters.region>> init 
      - run: terraform -chdir=<<parameters.region>> apply tf-<<parameters.region>>.plan -var-file=terraform.tfvars

  terraform_apply_global:
    docker:
      - image: hashicorp/terraform:1.7
    resource_class: small
    steps:
      - checkout
      - run: terraform -chdir=global init 
      - run: terraform -chdir=global apply tf-global.plan

workflows:
  tflint_and_plan:
    jobs:
      - tflint_region:
          name: tflint-<<matrix.region>>
          matrix:
            parameters:
              region: ["us-east-1", "us-east-2"]    

      - tflint_global:
          name: tflint-global

      - terraform_plan_region:
          name: terraform-plan-<<matrix.region>>
          requires:
            - tflint-<<matrix.region>>
          matrix:
            parameters:
              region: ["us-east-1", "us-east-2"]    
          context: aws

      - terraform_plan_global:
          name: terraform-plan-global
          requires:
            - tflint-global
          context: aws
      
      - approval:
          name: global-approval
          type: approval
          requires: 
            - terraform-plan-global

      - terraform_apply_global:
          name: terraform-apply-global
          requires:
            - terraform-plan-global
            - global-approval
          context: aws
      
      - approval:
          name: region-approval
          type: approval
          requires: 
            - terraform-plan-us-east-1
            - terraform-plan-us-east-2

      